## -- PotentialMembershipEvent

esb.sql.allPotentialMembershipEvents: |
    select
       id, date, pnr, meType, courseCode, reportCode, startSemester, semester, program, programOrientation,
           origin, origin2
    from
        POTENTIAL_MEMBERSHIP_EVENTS
    order by 
        id asc

esb.sql.potentialMembershipEventsNewerThan: |
    select
       id, date, pnr, meType, courseCode, reportCode, startSemester, semester, program, programOrientation,
           origin, origin2
    from
        POTENTIAL_MEMBERSHIP_EVENTS
    where
        date > :date
    order by 
        id asc

esb.sql.mostRecentPotentialMembershipEventFromLadok: |
    select
       id, date, pnr, meType, courseCode, reportCode, startSemester, semester, program, programOrientation,
           origin, origin2
    from
        POTENTIAL_MEMBERSHIP_EVENTS
    where
        origin <> 'SP'
        and id = (select max(id) from POTENTIAL_MEMBERSHIP_EVENTS where origin <> 'SP')

esb.sql.mostRecentPotentialMembershipEventFromSp: |
    select
       id, date, pnr, meType, courseCode, reportCode, startSemester, semester, program, programOrientation,
           origin, origin2
    from
        POTENTIAL_MEMBERSHIP_EVENTS
    where
        origin = 'SP'
        and id = (select max(id) from POTENTIAL_MEMBERSHIP_EVENTS where origin = 'SP')

esb.sql.saveNewPotentialMembershipEvent: |
    insert into
        POTENTIAL_MEMBERSHIP_EVENTS (date, pnr, meType, courseCode, reportCode, startSemester, semester,
            program, programOrientation, origin, origin2)
    values
        (:date, :pnr, :meTypeAsString, :courseCode, :reportCode, :startSemester, :semester,
            :program, :programOrientation, :origin, :origin2)


## -- MembershipEvent

esb.sql.mostRecentMembershipEvent: |
    select
       id, date, pnr, meType, courseCode, reportCode, startSemester, semester, program, programOrientation, 
       condition1, condition2, condition3, origin, origin2
    from
        MEMBERSHIP_EVENTS
    where
        id = (select max(id) from MEMBERSHIP_EVENTS)

esb.sql.saveNewMembershipEvent: |
    insert into
        MEMBERSHIP_EVENTS (date, pnr, meType, courseCode, reportCode, startSemester, semester,
            program, programOrientation, condition1, condition2, condition3, origin, origin2)
    values
        (:date, :pnr, :meTypeAsString, :courseCode, :reportCode, :startSemester, :semester,
            :program, :programOrientation, :condition1, :condition2, :condition3, :origin, :origin2)


## -- Membership

esb.sql.numberOfMembersForCourseInstance: |
    select
        count(*)
    from
        MEMBERSHIPS
    where
        reportCode        = :reportCode
        and startSemester = :startSemester

esb.sql.membershipsByCourseCode: |
    select
        id, date, pnr, courseCode, reportCode, startSemester, semester, program, programOrientation, origin, origin2
    from
        MEMBERSHIPS
    where
        pnr            = :pnr
        and courseCode = :courseCode
    order by 
        id asc

esb.sql.membershipsByReportCodeStartSemester: |
    select
        id, date, pnr, courseCode, reportCode, startSemester, semester, program, programOrientation, origin, origin2
    from
        MEMBERSHIPS
    where
        pnr               = :pnr
        and reportCode    = :reportCode
        and startSemester = :startSemester
    order by 
        id asc

esb.sql.membershipsByCourseCodeSemesterOrigin2: |
    select
        id, date, pnr, courseCode, reportCode, startSemester, semester, program, programOrientation, origin, origin2
    from
        MEMBERSHIPS
    where
        pnr            = :pnr
        and courseCode = :courseCode
        and semester   = :semester
        and origin     = :origin2
    order by 
        id asc

esb.sql.saveNewMembership: |
    insert into
        MEMBERSHIPS (date, pnr, courseCode, reportCode, startSemester, semester, program, programOrientation,
            origin, origin2)
    values
        (:date, :pnr, :courseCode, :reportCode, :startSemester, :semester, :program, :programOrientation,
            :origin, :origin2)

esb.sql.deleteMembershipById: |
    delete from
        MEMBERSHIPS
    where
        id = :id

esb.sql.deleteMembershipByCourseCode: |
    delete from
        MEMBERSHIPS
    where
        pnr            = :pnr
        and courseCode = :courseCode

esb.sql.deleteMembershipsByCourseCodeSemesterOrigin2: |
    delete from
        MEMBERSHIPS
    where
        pnr            = :pnr
        and courseCode = :courseCode
        and semester   = :semester
        and origin     = :origin2

## -- AccMembership

esb.sql.accMemberships: |
    select
        date, pnr, courseCode, reportCode, semester, program, programOrientation,
            response, condition1, condition2, condition3, programReportCode
    from
        ACC_MEMBERSHIPS
    where
        (semester = :semester1 or semester = :semester2)

esb.sql.saveNewAccMembership: |
    insert into
        ACC_MEMBERSHIPS (date, pnr, courseCode, reportCode, semester, program, programOrientation,
            response, condition1, condition2, condition3, programReportCode)
    values
        (:date, :pnr, :courseCode, :reportCode, :semester, :program, :programOrientation,
            :response, :condition1, :condition2, :condition3, :programReportCode)
        
esb.sql.deleteAccMemberships: |
    delete from
        ACC_MEMBERSHIPS

